import numpy as np  
import pandas as pd  
 

class LinearRegression:  
    def __init__(self, learning_rate=0.01, iterations=1000):  
        self.learning_rate = learning_rate  
        self.iterations = iterations  
        self.weights = None  
        self.bias = None  
    
    def mean_squared_error(self, y_true, y_pred):  
        return np.mean((y_true - y_pred) ** 2)  
    
    def fit(self, X, y):  
        n_samples, n_features = X.shape  
        self.weights = np.zeros(n_features)  
        self.bias = 0  
        for _ in range(self.iterations):  
            y_pred = np.dot(X, self.weights) + self.bias  
            dw = (1/n_samples) * np.dot(X.T, (y_pred - y))  
            db = (1/n_samples) * np.sum(y_pred - y)  
            self.weights -= self.learning_rate * dw  
            self.bias -= self.learning_rate * db  

        
    
    def predict(self, X):  
        return np.dot(X, self.weights) + self.bias  

def load(file_path):  
    df = pd.read_csv(file_path)  
    df.dropna(inplace=True)  
    df['Extracurricular Activities'] = df['Extracurricular Activities'].map({'Yes': 1, 'No': 0})  

    X = df[['Hours Studied', 'Previous Scores', 'Extracurricular Activities',   
             'Sleep Hours', 'Sample Question Papers Practiced']].values  
    y = df['Performance Index'].values  

    return X, y  

def main():  
    X, y = load('Student_Performance.csv')  
    X_mean = np.mean(X, axis=0)
    X_std = np.std(X, axis=0)
    X = (X - X_mean) / X_std

    
    n = len(X)  
    n_train = int(0.8 * n)  
    lr_model = LinearRegression(learning_rate=0.1, iterations=5000)  
    
    X_train = X[:n_train]  
    y_train = y[:n_train]  
    X_test = X[n_train:]  
    y_test = y[n_train:]  

    lr_model.fit(X_train, y_train)  
    
    y_pred_lr = lr_model.predict(X_test)  
   
    mse = lr_model.mean_squared_error(y_test, y_pred_lr)  
    print(f"Mean Squared Error: {mse}")  

if __name__ == "__main__":  
    main()
